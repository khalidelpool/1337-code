    void *mlx;
    void *mlx_window;

    srand(time(NULL));
    mlx = mlx_init();
    mlx_window = mlx_new_window(mlx, WIDTH, HEIGHT, "My First Window!");
    
    for(int y = HEIGHT * 0.1; y < HEIGHT * 0.9; y++)
    {
        for(int x = WIDTH * 0.1; x < WIDTH * 0.9; x++)
        {
            mlx_pixel_put(mlx, mlx_window, x, y, rand() % 0x1000000);
        }
    }
    mlx_string_put(mlx, mlx_window, WIDTH * 0.8, HEIGHT * 0.95, 0xffffff, "My pollock");
    mlx_loop(mlx);


#include "minilibx-linux/mlx.h"
#include <unistd.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <time.h>
#include "get_next_line.h"
#include "get_next_line.c"
#include "get_next_line_utils.c"

#define WIDTH 450
#define HEIGHT 800

typedef struct	s_data {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
}				t_data;

void	my_mlx_pixel_put(t_data *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = color;
}

int power(int base, int power)
{
	int result = 1;
	
	while(power-- > 0)
		result *= base;
	return (result);
}

void circle(t_data *img)
{
	int r = WIDTH * 0.1;
	int xc = HEIGHT / 2;
	int yc = WIDTH / 2;

	for (int y = yc - r; y < yc + r; y++)
	{
		for(int x = xc - r; x < xc + r; x++)
		{
			if (power(x - xc, 2) + power(y - yc, 2) <= power(r, 2))
				my_mlx_pixel_put(img, x, y, 0x00808080);
		}
	}
}

typedef struct	s_vars {
    void	*mlx;
    void	*win;
}				t_vars;

int	closer(int keycode, t_vars *vars)
{
	printf("key is: %d\n", keycode);
    mlx_destroy_window(vars->mlx, vars->win);
	exit(0);
    return (0);
}

int key_hook(int keycode, t_vars *vars)
{
	printf("the keycode is: %d, the char is: %c\n", keycode, keycode);
	return (0);
}

int	mouse_hook(int button, int x, int y, t_vars *vars)
{
	printf("the button is: %d\nthe positions is: (%d,%d)\n", button, x, y);
	return (0);
}

int main(void)
{
	void	*mlx;
	void	*mlx_win;
	t_data	img;
	t_vars	vars;
	void *image;
    char *relative_path = "./grass.xpm";
    int img_width;
    int img_height;

	mlx = mlx_init();
	vars.mlx = mlx;
	mlx_win = mlx_new_window(mlx, HEIGHT, WIDTH, "Hello world!");
	vars.win = mlx_win;
	img.img = mlx_new_image(mlx, HEIGHT, WIDTH);
	img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length,
								&img.endian);

	image = mlx_xpm_file_to_image(mlx, relative_path, &img_width, &img_height);

    if (!image)
        return (1); // Handle failure if image loading fails
	mlx_put_image_to_window(mlx, vars.win, image, 0, 0);
	
	// mlx_hook(vars.win, 2, (1L << 0), closer, &vars);
	
	mlx_key_hook(mlx_win, key_hook, &vars);
	mlx_mouse_hook(vars.win, mouse_hook, &vars);
	
	// circle(&img);
    // mlx_put_image_to_window(mlx, mlx_win, img.img, 0, 0);

    mlx_loop(mlx);
}


#include "minilibx-linux/mlx.h"
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <time.h>

#define WIDTH 450
#define HEIGHT 800

typedef struct	s_buff {
	void	*img;
	char	*addr;
	int		bits_per_pixel;
	int		line_length;
	int		endian;
    int     img_width;
    int     img_height;
}				t_buff;

typedef struct	s_vars {
    void	*mlx;
    void	*win;
    t_buff  buff;
    t_buff  rock;
    int     x;
    int     y;
}				t_vars;

void	my_mlx_pixel_put(t_buff *data, int x, int y, int color)
{
	char	*dst;

	dst = data->addr + (y * data->line_length + x * (data->bits_per_pixel / 8));
	*(unsigned int*)dst = color;
}

int key_hook(int keycode, t_vars *vars)
{
	printf("the keycode is: %d, the char is: %c\n", keycode, keycode);
    if (keycode == 'w' && vars->y != 0)
        vars->y--;
    else if (keycode == 'a' && vars->x != 0)
        vars->x--;
    else if (keycode == 's' && vars->y != WIDTH)
        vars->y++;
    else if (keycode == 'd' && vars->x != HEIGHT)
        vars->x++;
    mlx_put_image_to_window(vars->mlx, vars->win, vars->buff.img, 0, 0);
    mlx_pixel_put(vars->mlx, vars->win, vars->x, vars->y, 0);
    // my_mlx_pixel_put(&vars->buff, vars->x, vars->y, 0);
    // mlx_put_image_to_window(vars->mlx, vars->win, vars->buff.img, 0, 0);
	return (0);
}

int main()
{
    t_vars var;
    char *relative_path;

    var.mlx = mlx_init();
    var.win = mlx_new_window(var.mlx, HEIGHT, WIDTH, "Main");

    relative_path = "./grass.xpm";
    var.buff.img = mlx_xpm_file_to_image(var.mlx, relative_path, &var.buff.img_width, &var.buff.img_height);
    var.buff.addr = mlx_get_data_addr(var.buff.img, &var.buff.bits_per_pixel,
        &var.buff.line_length, &var.buff.endian);
    mlx_put_image_to_window(var.mlx, var.win, var.buff.img, 0, 0);

    var.rock.img = mlx_xpm_file_to_image(var.mlx, "rock.xpm", &var.rock.img_width, &var.rock.img_height);
    mlx_put_image_to_window(var.mlx, var.win, rock, 0, 0);

    var.x = 0;
    var.y = 0;
    mlx_key_hook(var.win, key_hook, &var);
    mlx_loop(var.mlx);
}

int key_hook(int keycode, t_vars *vars)
{
	printf("the keycode is: %d, the char is: %c\n", keycode, keycode);
    if ((keycode == 'w' || keycode == 65362) && (vars->y) > 45)
        vars->y-= vars->spider.img_width;
    else if ((keycode == 'a' || keycode == 65361) && (vars->x) > 45)
        vars->x-= vars->spider.img_height;
    else if ((keycode == 's' || keycode == 65364) && (vars->y + vars->spider.img_width) < WIDTH - 45)
        vars->y+= vars->spider.img_width;
    else if ((keycode == 'd' || keycode == 65363) && (vars->x + vars->spider.img_height) < HEIGHT- 45)
        vars->x+= vars->spider.img_height;
    else   
        return (1);
    mlx_put_image_to_window(vars->mlx, vars->win, vars->buff.img, 0, 0);
    draw_obstacle(map, vars);
    mlx_put_image_to_window(vars->mlx, vars->win, vars->spider.img, vars->x, vars->y);
    // mlx_pixel_put(vars->mlx, vars->win, vars->x, vars->y, 0);
    // my_mlx_pixel_put(&vars->buff, vars->x, vars->y, 0);
    // mlx_put_image_to_window(vars->mlx, vars->win, vars->buff.img, 0, 0);
	return (0);
}

char *map[] = { "111111111111111111",
                "101000111111111111",
                "101101100000000001",
                "100000000111111101",
                "111111111100000101",
                "100000000001111101",
                "101111111111000001",
                "101111111111111101",
                "100000000000000001",
                "111111111111111111", NULL};

int key_hook(int keycode, t_vars *vars)
{
	printf("the keycode is: %d, the char is: %c\n", keycode, keycode);
    if ((keycode == 'w' || keycode == 65362) && !(vars->map[vars->y - 1][vars->x] == '1' || (vars->map[vars->y - 1][vars->x] == 'E' && find_c(vars, 'c', 0))))
        vars->y--;
    else if ((keycode == 'a' || keycode == 65361) && !(vars->map[vars->y][vars->x - 1] == '1' || (vars->map[vars->y][vars->x - 1] == 'E' && find_c(vars, 'c', 0))))
        vars->x--;
    else if ((keycode == 's' || keycode == 65364) && !(vars->map[vars->y + 1][vars->x] == '1' || (vars->map[vars->y + 1][vars->x] == 'E' && find_c(vars, 'c', 0))))
        vars->y++;
    else if ((keycode == 'd' || keycode == 65363) && !(vars->map[vars->y][vars->x + 1] == '1' || (vars->map[vars->y][vars->x + 1] == 'E' && find_c(vars, 'c', 0))))
        vars->x++;
    else   
        return (1);
    if (vars->map[vars->y][vars->x] != 'E')
        vars->map[vars->y][vars->x] = 'P';
    draw_obstacle(vars);
    // mlx_put_image_to_window(vars->mlx, vars->win, vars->plyr.img, vars->x * 45, vars->y * 45);
	return (0);
}

char **init_map() {
    char **map = malloc(sizeof(char *) * 11);  // Allocate for 10 strings + NULL
    if (!map) return NULL;

    map[0] = ft_strdup("111111111111111111");
    map[1] = ft_strdup("101c0c100000001cc1");
    map[2] = ft_strdup("1011011000000000c1");
    map[3] = ft_strdup("100000000000000011");
    map[4] = ft_strdup("100000000000000001");
    map[5] = ft_strdup("100000001010000001");
    map[6] = ft_strdup("10000001ccc1000001");
    map[7] = ft_strdup("1000001ccccc100001");
    map[8] = ft_strdup("1P0001ccccccc100E1");
    map[9] = ft_strdup("111111111111111111");
    map[10] = NULL;  // Null terminator

    return map;
}